// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("SUPABASE_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @unique //@default(cuid())
    name          String
    email         String?        @unique
    emailVerified DateTime?
    image         String         @default("https://whxqvqjvmabbepltlsrp.supabase.co/storage/v1/object/public/taffy/profile_image_placeholder.jpg")
    accounts      Account[]
    sessions      Session[]
    projects      Project[]      @relation(name: "projectCreator")
    nfts          Nft[]
    votes         Vote[]
    bio           String?
    userCreated   DateTime       @default(now())
    contributions Contribution[]
    staked        Stake[]
    following     Project[]
    // following     FollowersOnProjects[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id                String         @id @default(cuid())
    nfts              Nft[]
    bannerImage       String         @default("https://whxqvqjvmabbepltlsrp.supabase.co/storage/v1/object/public/taffy/profile_hero.png")
    createdTimestamp  DateTime       @default(now())
    creator           User           @relation(fields: [creatorId], references: [id], name: "projectCreator")
    creatorId         String
    discord           String?
    linkedIn          String?
    twitter           String?
    telegram          String?
    description       String?
    image             String //@default("https://whxqvqjvmabbepltlsrp.supabase.co/storage/v1/object/public/taffy/profile_image_placeholder.jpg")
    name              String
    ticker            String
    tags              String[]       @default([])
    target            Int            @default(0)
    tokenAddress      String
    tokenSupply       Int            @default(1000000000)
    raiseTokenAddress String         @default("eth")
    amountRaised      Float          @default(0)
    amountStaked      Float          @default(0)
    raiseEndTimestamp Int
    views             Int            @default(0)
    proposals         Proposal[]
    contributions     Contribution[]
    stakes            Stake[]
    beneficiaries     Beneficiary[]
    followers         User[]
    // followers         FollowersOnProjects[]
}

model Nft {
    id               String        @id @default(cuid())
    chainId          Int           @default(1)
    contractAddress  String
    createdTimestamp DateTime      @default(now())
    creator          User          @relation(fields: [creatorId], references: [id])
    creatorId        String
    description      String
    mintTimestamp    Int
    name             String
    nftUrl           String
    project          Project?      @relation(fields: [projectId], references: [id])
    projectId        String?
    beneficiaries    Beneficiary[]
    tokenId          Int           @default(1)
    traits           Json[]        @default([])
    views            Int           @default(0)
}

model Proposal {
    id                   String  @id @default(cuid())
    options              Json[]
    project              Project @relation(fields: [projectId], references: [id])
    projectId            String
    question             String
    description          String?
    title                String
    votingCloseTimestamp Int
    votes                Vote[]
}

model Vote {
    id         String   @id @default(cuid())
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    proposal   Proposal @relation(fields: [proposalId], references: [id])
    proposalId String
    selection  Int
}

model Contribution {
    id                      String   @id @default(cuid())
    Project                 Project  @relation(fields: [projectId], references: [id])
    projectId               String
    User                    User     @relation(fields: [userId], references: [id])
    userId                  String
    contributedTokenAddress String
    amount                  Int
    contributionTimestamp   DateTime @default(now())
}

model Stake {
    id           String  @id @default(cuid())
    project      Project @relation(fields: [projectId], references: [id])
    projectId    String
    user         User    @relation(fields: [userId], references: [id])
    userId       String
    tokenAddress String
    amount       Int     @default(0)
}

model Beneficiary {
    id               String   @id @default(cuid())
    name             String?
    address          String
    percentage       Int
    benefit          String
    project          Project? @relation(fields: [projectId], references: [id])
    projectId        String?
    nft              Nft?     @relation(fields: [nftId], references: [id])
    nftId            String?
    vestingFrequency Int? // Seconds between each vesting period
    vestingLength    Int? // Overall seconds of total vesting schedule
    cliff            Int? // Seconds until initial vesting cliff
}

// model FollowersOnProjects {
//     project    Project  @relation(fields: [projectId], references: [id])
//     projectId  String
//     user       User     @relation(fields: [userId], references: [id])
//     userId     String
//     followedAt DateTime @default(now())

//     @@id([projectId, userId])
// }
